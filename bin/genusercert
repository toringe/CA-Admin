#!/bin/bash

if [ -e etc/config ]; then
  . etc/config
else
  echo "[ERROR] Config file not found. You must execute this script as ./bin/genusercert" >&2
  exit 1
fi


function usage
{
	cat <<-EOF
	`basename $0` will generate a TLS/SSL user certificate signed by ./ca/ca.crt with
	the distinguished name: DN=CN/emailAddress/O/OU/C/ST/L. This DN can be used with
	SSLRequire and SSLFakeAuth for user access management. [If only CN and email are 
	desired this script has to be modified. This limits the possibilities to use 
	SSLRequire for user-group matching.]
	
  This script generates TLS/SSL user certificates for authenticating web browser 
  clients (e.g. InternetExplorer, Firefox). This script automatically 
  creates password protected pkcs12 files that users can import 
  into Firefox or IE (double click) to allow access to a TLS/SSL user certificate 
  protected web-server. These user certificates are usually issued by the owner of 
  the server. User certificate and client certificates are issued by the same self
  signed certificate authority.

	WARNING: provided passwords may be visible to other users that are currently 
	logged in at this computer (ps). Run in single user mode or disconnect network.
	
	Before running this script you need to have or create a self-signed 
	Certificate Authority certificate with the name ca.crt and ca.key
	
	Defaults can be modified by editing this script.
	HINT: .crt files are the same as .pem files.
	
	Example (minimal - uses defaults of script and full):
	`basename $0` -C "John Smith" -e "js@acme.com" -x "secret" -p "secret-CA-password"
	`basename $0` -C "John Smith" -e "js@acme.com" -x secret -p "secret-CA-password" -o "Acme Holding" -u "Acme IT" -c US -s TN -l Nashville
	
	These options are recognized:		Default:

	-C   Common Name (CN)		"$CN"
	-e   full email address of user	$email
	-x   P12 import/export userpassword 	$exportpassword
	-p   CA master password		$capassword
	-N   comment				"$comment"
	-c   country (two letters, e.g. DE)	$C
	-s   state (ST)			$ST
	-l   city (L)			$L
	-o   organisation (O)		"$O"
	-u   organisational unit (OU)	"$U"
	-d   days user cert is valid for	$days
  -q   PINURL for website password download echoed into $CERT.url
       (Integration with http://sourceforge.net/projects/tab-2/)
	-h   show usage
	EOF
}    

# The directory that hods the CA database, ca.crt and ca.key
CADB_DIR=$CABASE

# Exit if anything goes wrong
set -e

test -t && { BRIGHT='[01m'; RED='[31m'; NORMAL='[00m'; }
function myecho { echo $BRIGHT$@$NORMAL; }
function error  { echo $RED$@$NORMAL; }
function myexit { error something ugly seems to have happened in line $1...; exit $2; }

##########################################
# ADD YOUR DEFAULTS HERE (C,ST,L) ...
##########################################
# defaults
comment="TLS/SSL user certificate"
C=NO
ST=Oslo
L=Oslo
U="Norwegian Chapter"
O="The Honeynet Project"
days=365
CERT=user

while getopts C:N:c:s:l:o:u:n:e:x:p:d:q:h OPT; do
    case $OPT in
        C) CN=$OPTARG;;
        N) comment=$OPTARG;;
        x) exportpassword=$OPTARG;;
        p) capassword=$OPTARG;;
        c) C=$OPTARG;;
        s) ST=$OPTARG;;
        l) L=$OPTARG;;
        u) U=$OPTARG;;
        o) O=$OPTARG;;
        e) email=$OPTARG;;
        d) days=$OPTARG;;
        q) PINURL=$OPTARG;;
        h) usage; exit 2;;
        *) echo unrecognized option: $OPT; usage; exit 2;;
    esac
done

if [[ $CN == "" || $email == "" ]]; then
	error "*** ERROR: CommonName (CN) and full email-address required (-C -e options)!"
	echo ""
	usage; exit 2;
fi

if [[ $exportpassword == "" ]]; then
	error "*** ERROR: P12 export password required (-x option)!"
	echo ""
	usage; exit 3;
fi

if [[ $capassword == "" ]]; then
	error "*** ERROR: CA root password required (-p option)!"
	echo ""
	usage; exit 4;
fi

GO_LEFT="\033[80D"
GO_MIDDLE="$GO_LEFT\033[15C"
for i in comment CN email C ST L U O days; do 
	eval "echo -e $i\"$GO_MIDDLE\" \$$i;"
done

############ END OF SUSE SCRIPT #################
############ ssl-ca: new-user-cert #############
echo ""
echo "-=| REQUEST (key and csr) |=----------------------------------------------------"
echo ""

CONFIG="user-cert.conf"
cat >$CONFIG <<EOT
[ req ]
default_bits			= 1024
default_keyfile			= user.key
distinguished_name		= req_distinguished_name
string_mask			= nombstr
req_extensions			= v3_req
[ req_distinguished_name ]
O                      = $O
OU                     = $U
C                      = $C
ST                     = $ST
L                      = $L
[ v3_req ]
nsCertType			= client,email
basicConstraints		= critical,CA:false
EOT

#make the certificate file name the email address
CERT=$email

# do we have a key??
if [ ! -f $CERT.key ]; then
	echo "No $CERT.key round. Generating one"
	openssl genrsa -out $CERT.key 1024
	echo ""
fi

# This is the distinguished name (DN) of the subject
SUBJECT_DN="/CN=$CN/emailAddress=$email/O=$O/OU=$U/C=$C/ST=$ST/L=$L"

## Short version: must change "supplied" entries in the signing requirement (below) to "optional" 
#SUBJECT_DN="/CN=$CN/emailAddress=$email"

# create a password entry for SSLFakeAuth 
echo "Creating SSLFakeAuth data for $SUBJECT_DN (e.g. append it to htpasswd file) ..."
echo "$SUBJECT_DN:xxj31ZMTZzkVA" >$CERT.sslFakeAuth

# create certificate
echo "Fill in certificate data for $SUBJECT_DN ..."
openssl req -new -config $CONFIG -subj "$SUBJECT_DN" -key $CERT.key -out $CERT.csr

rm -f $CONFIG

############ ssl-ca: sign-user-cert #############
echo ""
echo "-=| SIGNING (crt) |=------------------------------------------------------------"
echo ""

#  create the CA requirement to sign the cert
cat >ca.config <<EOT
[ ca ]
default_ca              = default_CA
[ default_CA ]
dir                     = $CADB_DIR
certs                   = \$dir
new_certs_dir           = \$dir/ca.db.certs
database                = \$dir/ca.db.index
serial                  = \$dir/ca.db.serial
RANDFILE                = \$dir/random-bits
certificate             = \$dir/ca.crt
private_key             = \$dir/ca.key
default_days            = $CC_VALID
default_crl_days        = 30
default_md              = sha512
preserve                = yes
x509_extensions		= user_cert
policy                  = policy_anything
email_in_dn		= yes
[ policy_anything ]
commonName              = supplied
emailAddress            = supplied
O                       = supplied
OU                      = supplied
C                       = supplied
ST                      = supplied
L                       = supplied
[ user_cert ]
#SXNetID		= 3:yeak
subjectAltName		= email:copy
basicConstraints	= critical,CA:false
authorityKeyIdentifier	= keyid:always
extendedKeyUsage	= clientAuth,emailProtection
EOT

#  sign the certificate
echo "CA signing: $CERT.csr -> $CERT.crt:"
openssl ca -batch -passin "pass:$capassword" -config ca.config -out $CERT.crt -infiles $CERT.csr 

echo "CA verifying: $CERT.crt <-> CA cert"
openssl verify -CAfile $CADB_DIR/ca.crt $CERT.crt

#  cleanup after SSLeay 
rm -f ca.config

############ ssl-ca: p12.sh #############
echo ""
echo "-=| EXPORTING PKCS12 (p12) |=---------------------------------------------------"

username="`openssl x509 -noout  -in $CERT.crt -subject | sed -e 's;.*CN=;;' -e 's;/Em.*;;'`"
caname="`openssl x509 -noout  -in $CADB_DIR/ca.crt -subject | sed -e 's;.*CN=;;' -e 's;/Em.*;;'`"

# Package it.
openssl pkcs12 -export -in "$CERT.crt" -inkey "$CERT.key" -certfile $CADB_DIR/ca.crt \
	-name "$username" -caname "$caname" -out $CERT.p12 -passout "pass:$exportpassword"

echo ""
echo "The certificate for $CERT has been collected into a pkcs12 file."
echo "You can download to your browser and import it."

if [[ $PINURL != "" ]]; then
	echo "$PINURL" > $CERT.url
fi

